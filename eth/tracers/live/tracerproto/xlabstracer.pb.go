// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.2
// source: xlabstracer.proto

package tracerproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Header represents a block header
type Header struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ParentHash       []byte                 `protobuf:"bytes,1,opt,name=parentHash,proto3" json:"parentHash,omitempty"`
	UncleHash        []byte                 `protobuf:"bytes,2,opt,name=uncleHash,proto3" json:"uncleHash,omitempty"`
	Coinbase         []byte                 `protobuf:"bytes,3,opt,name=coinbase,proto3" json:"coinbase,omitempty"`
	Root             []byte                 `protobuf:"bytes,4,opt,name=root,proto3" json:"root,omitempty"`
	TxHash           []byte                 `protobuf:"bytes,5,opt,name=txHash,proto3" json:"txHash,omitempty"`
	ReceiptHash      []byte                 `protobuf:"bytes,6,opt,name=receiptHash,proto3" json:"receiptHash,omitempty"`
	Bloom            []byte                 `protobuf:"bytes,7,opt,name=bloom,proto3" json:"bloom,omitempty"`
	Difficulty       []byte                 `protobuf:"bytes,8,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	Number           []byte                 `protobuf:"bytes,9,opt,name=number,proto3" json:"number,omitempty"`
	GasLimit         uint64                 `protobuf:"varint,10,opt,name=gasLimit,proto3" json:"gasLimit,omitempty"`
	GasUsed          uint64                 `protobuf:"varint,11,opt,name=gasUsed,proto3" json:"gasUsed,omitempty"`
	Time             uint64                 `protobuf:"varint,12,opt,name=time,proto3" json:"time,omitempty"`
	Extra            []byte                 `protobuf:"bytes,13,opt,name=extra,proto3" json:"extra,omitempty"`
	MixDigest        []byte                 `protobuf:"bytes,14,opt,name=mixDigest,proto3" json:"mixDigest,omitempty"`
	Nonce            []byte                 `protobuf:"bytes,15,opt,name=nonce,proto3" json:"nonce,omitempty"`
	BaseFee          []byte                 `protobuf:"bytes,16,opt,name=baseFee,proto3" json:"baseFee,omitempty"`
	WithdrawalsHash  []byte                 `protobuf:"bytes,17,opt,name=withdrawalsHash,proto3" json:"withdrawalsHash,omitempty"`
	BlobGasUsed      *uint64                `protobuf:"varint,18,opt,name=blobGasUsed,proto3,oneof" json:"blobGasUsed,omitempty"`
	ExcessBlobGas    *uint64                `protobuf:"varint,19,opt,name=excessBlobGas,proto3,oneof" json:"excessBlobGas,omitempty"`
	ParentBeaconRoot []byte                 `protobuf:"bytes,20,opt,name=parentBeaconRoot,proto3" json:"parentBeaconRoot,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Header) Reset() {
	*x = Header{}
	mi := &file_xlabstracer_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_xlabstracer_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_xlabstracer_proto_rawDescGZIP(), []int{0}
}

func (x *Header) GetParentHash() []byte {
	if x != nil {
		return x.ParentHash
	}
	return nil
}

func (x *Header) GetUncleHash() []byte {
	if x != nil {
		return x.UncleHash
	}
	return nil
}

func (x *Header) GetCoinbase() []byte {
	if x != nil {
		return x.Coinbase
	}
	return nil
}

func (x *Header) GetRoot() []byte {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *Header) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *Header) GetReceiptHash() []byte {
	if x != nil {
		return x.ReceiptHash
	}
	return nil
}

func (x *Header) GetBloom() []byte {
	if x != nil {
		return x.Bloom
	}
	return nil
}

func (x *Header) GetDifficulty() []byte {
	if x != nil {
		return x.Difficulty
	}
	return nil
}

func (x *Header) GetNumber() []byte {
	if x != nil {
		return x.Number
	}
	return nil
}

func (x *Header) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *Header) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *Header) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Header) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *Header) GetMixDigest() []byte {
	if x != nil {
		return x.MixDigest
	}
	return nil
}

func (x *Header) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *Header) GetBaseFee() []byte {
	if x != nil {
		return x.BaseFee
	}
	return nil
}

func (x *Header) GetWithdrawalsHash() []byte {
	if x != nil {
		return x.WithdrawalsHash
	}
	return nil
}

func (x *Header) GetBlobGasUsed() uint64 {
	if x != nil && x.BlobGasUsed != nil {
		return *x.BlobGasUsed
	}
	return 0
}

func (x *Header) GetExcessBlobGas() uint64 {
	if x != nil && x.ExcessBlobGas != nil {
		return *x.ExcessBlobGas
	}
	return 0
}

func (x *Header) GetParentBeaconRoot() []byte {
	if x != nil {
		return x.ParentBeaconRoot
	}
	return nil
}

// Receipt represents a transaction receipt
type Receipt struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Status            uint64                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	CumulativeGasUsed uint64                 `protobuf:"varint,2,opt,name=cumulativeGasUsed,proto3" json:"cumulativeGasUsed,omitempty"`
	Bloom             []byte                 `protobuf:"bytes,3,opt,name=bloom,proto3" json:"bloom,omitempty"`
	TxIndex           uint64                 `protobuf:"varint,4,opt,name=txIndex,proto3" json:"txIndex,omitempty"`
	GasUsed           uint64                 `protobuf:"varint,5,opt,name=gasUsed,proto3" json:"gasUsed,omitempty"`
	ContractAddress   string                 `protobuf:"bytes,6,opt,name=contractAddress,proto3" json:"contractAddress,omitempty"`
	Logs              []*Log                 `protobuf:"bytes,7,rep,name=logs,proto3" json:"logs,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Receipt) Reset() {
	*x = Receipt{}
	mi := &file_xlabstracer_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Receipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Receipt) ProtoMessage() {}

func (x *Receipt) ProtoReflect() protoreflect.Message {
	mi := &file_xlabstracer_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Receipt.ProtoReflect.Descriptor instead.
func (*Receipt) Descriptor() ([]byte, []int) {
	return file_xlabstracer_proto_rawDescGZIP(), []int{1}
}

func (x *Receipt) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Receipt) GetCumulativeGasUsed() uint64 {
	if x != nil {
		return x.CumulativeGasUsed
	}
	return 0
}

func (x *Receipt) GetBloom() []byte {
	if x != nil {
		return x.Bloom
	}
	return nil
}

func (x *Receipt) GetTxIndex() uint64 {
	if x != nil {
		return x.TxIndex
	}
	return 0
}

func (x *Receipt) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *Receipt) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *Receipt) GetLogs() []*Log {
	if x != nil {
		return x.Logs
	}
	return nil
}

// Log represents a log entry inside a receipt
type Log struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Topics        []string               `protobuf:"bytes,2,rep,name=topics,proto3" json:"topics,omitempty"`
	Data          []byte                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	BlockNumber   uint64                 `protobuf:"varint,4,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	TxHash        string                 `protobuf:"bytes,5,opt,name=txHash,proto3" json:"txHash,omitempty"`
	TxIndex       uint64                 `protobuf:"varint,6,opt,name=txIndex,proto3" json:"txIndex,omitempty"`
	LogIndex      uint64                 `protobuf:"varint,7,opt,name=logIndex,proto3" json:"logIndex,omitempty"`
	Removed       bool                   `protobuf:"varint,8,opt,name=removed,proto3" json:"removed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Log) Reset() {
	*x = Log{}
	mi := &file_xlabstracer_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_xlabstracer_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_xlabstracer_proto_rawDescGZIP(), []int{2}
}

func (x *Log) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Log) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *Log) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Log) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *Log) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *Log) GetTxIndex() uint64 {
	if x != nil {
		return x.TxIndex
	}
	return 0
}

func (x *Log) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *Log) GetRemoved() bool {
	if x != nil {
		return x.Removed
	}
	return false
}

// Event is the top-level structure we transmit
type Event struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	LatestBlock    *Header                `protobuf:"bytes,1,opt,name=latestBlock,proto3" json:"latestBlock,omitempty"`
	FinalizedBlock *Header                `protobuf:"bytes,2,opt,name=finalizedBlock,proto3,oneof" json:"finalizedBlock,omitempty"`
	SafeBlock      *Header                `protobuf:"bytes,3,opt,name=safeBlock,proto3,oneof" json:"safeBlock,omitempty"`
	Receipts       []*Receipt             `protobuf:"bytes,4,rep,name=receipts,proto3" json:"receipts,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_xlabstracer_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_xlabstracer_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_xlabstracer_proto_rawDescGZIP(), []int{3}
}

func (x *Event) GetLatestBlock() *Header {
	if x != nil {
		return x.LatestBlock
	}
	return nil
}

func (x *Event) GetFinalizedBlock() *Header {
	if x != nil {
		return x.FinalizedBlock
	}
	return nil
}

func (x *Event) GetSafeBlock() *Header {
	if x != nil {
		return x.SafeBlock
	}
	return nil
}

func (x *Event) GetReceipts() []*Receipt {
	if x != nil {
		return x.Receipts
	}
	return nil
}

var File_xlabstracer_proto protoreflect.FileDescriptor

var file_xlabstracer_proto_rawDesc = string([]byte{
	0x0a, 0x11, 0x78, 0x6c, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x78, 0x6c, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72,
	0x22, 0xf6, 0x04, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x75,
	0x6e, 0x63, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x75, 0x6e, 0x63, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x69,
	0x6e, 0x62, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x6f, 0x69,
	0x6e, 0x62, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x78, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x6f, 0x6d, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x6f, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66,
	0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x64,
	0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x67, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x69, 0x78, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6d, 0x69, 0x78, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x73, 0x65, 0x46, 0x65, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x46, 0x65, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x25, 0x0a, 0x0b, 0x62, 0x6c, 0x6f,
	0x62, 0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x62, 0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x29, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x61,
	0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x65, 0x73,
	0x73, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x10, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x6c, 0x6f, 0x62,
	0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x78, 0x63, 0x65,
	0x73, 0x73, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x61, 0x73, 0x22, 0xe9, 0x01, 0x0a, 0x07, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a,
	0x11, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x47, 0x61, 0x73, 0x55, 0x73,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x6c, 0x6f, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x6f,
	0x6d, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x74, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x67,
	0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x61,
	0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x24, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x78, 0x6c, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x52,
	0x04, 0x6c, 0x6f, 0x67, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x74, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x22, 0x8b, 0x02,
	0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x78,
	0x6c, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x40,
	0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x78, 0x6c, 0x61, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x88, 0x01, 0x01,
	0x12, 0x36, 0x0a, 0x09, 0x73, 0x61, 0x66, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x78, 0x6c, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x72, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x01, 0x52, 0x09, 0x73, 0x61, 0x66, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78, 0x6c, 0x61,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x73, 0x61, 0x66, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x30, 0x5a, 0x2e, 0x78,
	0x6c, 0x61, 0x62, 0x73, 0x2f, 0x67, 0x6f, 0x2d, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x2f, 0x65, 0x74, 0x68, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x73, 0x2f, 0x6c, 0x69, 0x76,
	0x65, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_xlabstracer_proto_rawDescOnce sync.Once
	file_xlabstracer_proto_rawDescData []byte
)

func file_xlabstracer_proto_rawDescGZIP() []byte {
	file_xlabstracer_proto_rawDescOnce.Do(func() {
		file_xlabstracer_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_xlabstracer_proto_rawDesc), len(file_xlabstracer_proto_rawDesc)))
	})
	return file_xlabstracer_proto_rawDescData
}

var file_xlabstracer_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_xlabstracer_proto_goTypes = []any{
	(*Header)(nil),  // 0: xlabstracer.Header
	(*Receipt)(nil), // 1: xlabstracer.Receipt
	(*Log)(nil),     // 2: xlabstracer.Log
	(*Event)(nil),   // 3: xlabstracer.Event
}
var file_xlabstracer_proto_depIdxs = []int32{
	2, // 0: xlabstracer.Receipt.logs:type_name -> xlabstracer.Log
	0, // 1: xlabstracer.Event.latestBlock:type_name -> xlabstracer.Header
	0, // 2: xlabstracer.Event.finalizedBlock:type_name -> xlabstracer.Header
	0, // 3: xlabstracer.Event.safeBlock:type_name -> xlabstracer.Header
	1, // 4: xlabstracer.Event.receipts:type_name -> xlabstracer.Receipt
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_xlabstracer_proto_init() }
func file_xlabstracer_proto_init() {
	if File_xlabstracer_proto != nil {
		return
	}
	file_xlabstracer_proto_msgTypes[0].OneofWrappers = []any{}
	file_xlabstracer_proto_msgTypes[3].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_xlabstracer_proto_rawDesc), len(file_xlabstracer_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_xlabstracer_proto_goTypes,
		DependencyIndexes: file_xlabstracer_proto_depIdxs,
		MessageInfos:      file_xlabstracer_proto_msgTypes,
	}.Build()
	File_xlabstracer_proto = out.File
	file_xlabstracer_proto_goTypes = nil
	file_xlabstracer_proto_depIdxs = nil
}
